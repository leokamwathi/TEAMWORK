const { Op } = require('sequelize');

class DbControlClass{

    // Table = Sequelize.model;

constructor(table) {
        this.Table = table;
}

    createSycn(row){
        return new Promise((resolve, reject) => {
            this.Table.sync({ force: true }).then(() => {
                // Now the `users` table in the database corresponds to the model definition
                this.Table.create(row).then((createdRow) => {
                    resolve(createdRow)
                }).catch((error) => {
                    reject(error)
                });
            })
        })
    }
    
    findAll(row={}){
        return new Promise((resolve, reject) => {
            // Find all rows
            this.Table.findAll({
                where: {
                ...row
            }}
            )
                .then(rows => {
                    resolve(rows)
                })
                .catch((error) => {
                    reject(error)
                });
        })
    }

    create(row){
        return new Promise((resolve, reject) => {
            // Create a new user return autogenerated id
            this.Table.create(row)
                .then((createdRow) => {
                    resolve(createdRow)
                })
                .catch((error) => {
                    reject(error);
                });
        })
    }

    delete(rowId){
        return new Promise((resolve, reject) => {
            // Delete user with id
            this.Table.destroy({
                where: {
                    id: rowId
                },
                truncate: true,
                cascade: true,
                restartIdentity:true
            }, this.Table).then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            });
        })
    }

    deleteAll() {
        return new Promise((resolve, reject) => {
            // Delete user with id
            this.Table.destroy({
                where: {},
                truncate: true,
                cascade: true,
                restartIdentity: true
            }, this.Table).then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            });
        })
    }


    update(row){
        return new Promise((resolve, reject) => {
            // Change data for user with id
            this.Table.update(row, {
                where: {
                    id: row.id
                }
            }).then((updatedRowsCount) => {
                resolve(updatedRowsCount)
            }).catch((error) => {
                reject(error)
            });

        }
        )
    }

    findOne(row) {
        return new Promise((resolve, reject) => {
            // Change data for user with id
            try {
                this.Table.findOne({
                    where: {
                        ...row
                    }
                }).then((rows) => {
                        if (rows.id > 0) {
                            resolve(rows)
                        }
                    resolve(false)
                   // reject(new Error('No record Found'))
                }).catch((error) => {
                    reject(error)
                });
            } catch (error) {
                reject(error)
            }
        }
        )
    }

    dropTable(){
        return new Promise((resolve, reject) => {
            this.Table.drop().then(()=>{
                resolve(true);
            }).catch((error)=>{
                reject(error)
            })
        }
        )};
}

module.exports = {DbControlClass,Op};

