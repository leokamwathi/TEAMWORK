const { Op } = require('sequelize');

class DbControlClass{

    // Table = Sequelize.model;

constructor(table) {
        this.Table = table;
}

/*   
createSycn(row){
        return new Promise((resolve, reject) => {
            this.Table.sync({ force: true }).then(() => {
                // Now the `users` table in the database corresponds to the model definition
                this.Table.create(row).then((createdRow) => {
                    resolve(createdRow)
                }).catch((error) => {
                    reject(error)
                });
            })
        })
    }
    */
/**
 * row - enter what field you want to search by
 * order - how do you want to sort the returened data
 * @param row {id:5} 
 * @param order [['createdAt', 'DESC']]
 * @param include: [{model: users},{model: posts}]
 */

 // {},[['createdAt', 'DESC']],[{model: Users, attributes: ['email']}] //model: Users, attributes: ['email']
    findAll(row={},order=[['createdAt', 'DESC']],include=[{all:true}]){
        return new Promise((resolve, reject) => {
            // Find all rows row={}   {where: {..row }} 
         //
            return this.Table.findAll({
                where:row,
                order,
                include
            }
            ).then(rows => {
                    // console.log("FIND ALL ROWS", JSON.stringify(rows, null, 4));
                    return resolve(JSON.parse(JSON.stringify(rows, null, 4)))
                })
                .catch((error) => {
                    return reject(error)
                });
        })
    }

    create(row){
        return new Promise((resolve, reject) => {
            // Create a new user return autogenerated id
            return this.Table.create(row)
                .then((createdRow) => {
                    // console.log('created record', createdRow);
                    return resolve(createdRow)
                })
                .catch((error) => {
                    // console.log(error);
                    return reject(error);
                });
        })
    }

    delete(rowId){
        return new Promise((resolve, reject) => {
            // Delete user with id
           return this.Table.destroy({
                where: {
                    id: rowId
                },
                truncate: true,
                cascade: true,
                restartIdentity:true
            }, this.Table).then((deletedCount) => {
                return resolve(deletedCount);
            }).catch((error) => {
                return reject(error)
            });
        })
    }

   
   /*
    deleteAll() {
        return new Promise((resolve, reject) => {
            // Delete user with id
            this.Table.destroy({
                where: {},
                truncate: true,
                cascade: true,
                restartIdentity: true
            }, this.Table).then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            });
        })
    }
*/

    update(row){
        return new Promise((resolve, reject) => {
                // Change data for user with id
              // console.log("ROW TO UPDATE:", row,row.id);
               return this.Table.update(row, {
                    where:
                    {
                        id: row.id
                    }
                }).then((updatedRowsCount) => {
                    // console.log("UPDATED RECORDS:", updatedRowsCount);
                    return resolve(...updatedRowsCount)
                }).catch((error) => {
                  // console.log("UPDATE ERROR:", error);
                    return reject(error)
                });
                // console.log("THIS DOT ERROR:");
                // reject(new Error('A record with given ID was not found. Nothing to update.'))
        }
        )
    }

  

    findOne(row) {
        return new Promise((resolve, reject) => {
            // Change data for user with id
            // try {
                return this.Table.findOne({
                    where: row
                }).then((rows) => {
                    return resolve(rows)
                }).catch((error) => {
                    return reject(error)
                });
            // } catch (error) {
            //     return reject(error)
            // }
        }
        )
    }

    /*
    dropTable(){
        return new Promise((resolve, reject) => {
            this.Table.drop().then(()=>{
                resolve(true);
            }).catch((error)=>{
                reject(error)
            })
        }
        )};
        */
}

module.exports = {DbControlClass,Op};

