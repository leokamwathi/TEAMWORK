const { Op } = require('sequelize');

class DbControlClass{

    // Table = Sequelize.model;

constructor(table) {
        this.Table = table;
}

    createSycn(row){
        return new Promise((resolve, reject) => {
            this.Table.sync({ force: true }).then(() => {
                // Now the `users` table in the database corresponds to the model definition
                this.Table.create(row).then((createdRow) => {
                    try {
                       if (!createdRow) {
                            throw new Error('No record was created')
                        } else {
                            resolve(createdRow)
                        } 
                    } catch (error) {
                        reject(error)
                    }
                    
                }).catch((error) => {
                    reject(error)
                });
            })
        })
    }

    createSycnAll(rows) {
        return new Promise((resolve, reject) => {
            
            this.Table.sync({ force: true }).then(() => {
                // Now the `users` table in the database corresponds to the model definition
                rows.forEach(async (row) => {
                    try {
                        await this.createSycn(row).then((createdRow)=>{
                        console.log(`Created user ${createdRow.firstName}`);
                    }).catch((error)=>{
                        reject(error);
                    });
                    } catch (error) {
                        reject(error);
                    }
                    
                    
                    /*
                    this.Table.create(row).then((createdRow) => {
                        if (!createdRow) {
                            reject(new Error('No record was created'))
                            createdAll = false;
                        } else {
                            console.log(`Created user ${createdRow.firstName}`);
                            createdAll = (createdAll && true);
                        }
                    }).catch((error) => {
                        console.log(error);
                        createdAll = false;
                        reject(error)
                    });
                    */
                })
                    console.log(`Created users`);
                    resolve(true)

            })
        })
    }

    findAll(row={}){
        return new Promise((resolve, reject) => {
            // Find all rows
            this.Table.findAll({
                where: {
                ...row
            }}
            )
                .then(rows => {
                    try {
                        if (!rows) {
                            throw new Error('No records where found')
                        } else {
                            resolve(rows)
                        }
                    } catch (error) {
                        reject(error)
                    }
                  
                })
                .catch((error) => {
                    reject(error)
                });
        })
    }

    create(row){
        return new Promise((resolve, reject) => {
            // Create a new user return autogenerated id
            this.Table.create(row)
                .then((createdRow) => {
                    try {
                        if (!createdRow) {
                            throw new Error('No record was created')
                        } else {
                            resolve(createdRow)
                        }
                    } catch (error) {
                        reject(error)
                    }
                    
                })
                .catch((error) => {
                    reject(error);
                });
        })
    }

    delete(rowId){
        return new Promise((resolve, reject) => {
            // Delete user with id
            this.Table.destroy({
                where: {
                    id: rowId
                },
                truncate: true,
                cascade: true,
                restartIdentity:true
            }, this.Table).then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            });
        })
    }

    deleteAll() {
        return new Promise((resolve, reject) => {
            // Delete user with id
            this.Table.destroy({
                where: {},
                truncate: true,
                cascade: true,
                restartIdentity: true
            }, this.Table).then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            });
        })
    }


    update(row){
        return new Promise((resolve, reject) => {
            // Change data for user with id
            this.Table.update(row, {
                where: {
                    id: row.id
                }
            }).then((updatedRowsCount) => {
                try {
 if (updatedRowsCount===0) {
                    throw new Error('No record Found')
                } else {
                    resolve(updatedRowsCount)
                }
                } catch (error) {
                    reject(error)
                }
               
            }).catch((error) => {
                reject(error)
            });

        }
        )
    }

    updateOrCreate(row) {
        return new Promise((resolve, reject) => {
            try {
                // const rowId = row.id;
                // { [key]: val, ...rest } = obj;
                const newrow = {};
                Object.keys(row).forEach((key) => {
                    if (key != 'id') {
                        newrow[key] = row[key];
                    }
                })
                this.findOne({ id: row.id }).then(()=>{
                    this.findOne(row).then(()=>{
                        resolve(true)
                    }).catch(()=>{
                        console.log(newrow);
                        this.update(row)
                            .then((rowCount) => {
                                console.log('Updated ', rowCount, ' user(s)');
                                resolve(rowCount)
                            })
                            .catch((error) => {
                                reject(error)
                            });
                    })
                }).catch(()=>{
                    this.createSycn(newrow).then((createdRow) => {
                        console.log('Created user ', createdRow.firstName);
                    })
                        .then(() => {
                            resolve(1)
                        })
                        .catch((error) => {
                            reject(error);
                        });
                })
            } catch (error) {
                reject(error);
            }
        })
    }

    updateAll(rows) {
        return new Promise((resolve, reject) => {
            try {
                let updatedAllRowsCount = 0;
                rows.forEach(async (row) => {
                    console.log('Updating user ', row.firstName);
                        await this.update(row).then((updatedRows) => {
                            if ((updatedRows)>0){
                                console.log('Updated ', updatedRows, ' users');
                                updatedAllRowsCount += updatedRows
                            }else{
                                this.createSycn(row).then((createdRow) => {
                                    console.log('Created user ', createdRow.firstName);
                                }).catch((error) => {
                                    reject(error);
                                });
                            } 
                        }).catch((error) => {
                            reject(error)
                        })
                })
                resolve(updatedAllRowsCount);
            } catch (error) {
                reject(error)
            }
           
        })
    }

    findOne(row) {
        return new Promise((resolve, reject) => {
            // Change data for user with id
            try {
                this.Table.findOne({
                    where: {
                        ...row
                    }
                }).then((rows) => {
                        if (rows.id > 0) {
                            resolve(rows)
                        }
                    resolve(false)
                   // reject(new Error('No record Found'))
                }).catch((error) => {
                    reject(error)
                });
            } catch (error) {
                reject(error)
            }
        }
        )
    }


    createTable() {
        return new Promise((resolve, reject) => {
            this.Table.sync().then(() => {
                resolve(true);
            }).catch((error) => {
                reject(error)
            })
        }
        )  
    };

    dropTable(){
        return new Promise((resolve, reject) => {
            this.Table.drop().then(()=>{
                resolve(true);
            }).catch((error)=>{
                reject(error)
            })
        }
        )};
}

module.exports = {DbControlClass,Op};

